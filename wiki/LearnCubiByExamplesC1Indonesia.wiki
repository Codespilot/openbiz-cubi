#summary "Learn Cubi By Examples" Bab 1 - Desain Aplikasi
#labels Indonesia
= Learn Cubi By Examples Chapter 1 - Desain Aplikasi =

Buku ini menggunakan Cubi Trac untuk mendemonstrasikan praktek terbaik (_best practice_) dalam membangun aplikasi Cubi. Pertama kita perlu memahami kebutuhan bisnis dari aplikasi *Trac*.

== Kebutuhan bisnis ==
Trac merupakan sebuah sistim tiket yang dapat digunakan dalam berbagai lingkungan bisnis.
 * Untuk pengembangan produk, Trac dapat digunakan sebagai sistim pelacakan kesalahan (_bug tracking system_). 
 * Untuk layanan pelanggan (_customer service_), Trac dapat digunakan untuk melacak permintaan pelanggan.
 * Trac juga dapat digunakan sebagai komponen aplikasi yang lebih besar seperti manajemen proyek, otomatisasi kantor, _help desk_ dan lainnya.

=== Fitur ===
Fungsi utama dari Trac adalah untuk mengelola tiket. Sebuah tiket harus memiliki atribut berikut:
 * Id
 * Name or Title
 * Summary
 * Description or Content
 * Type (Defect | Feature | Task | ...)
 * Status (Open | Accepted | Reopened | Resolved | Closed)
 * Priority (P0 | P1 | P2 | P3 |...)
 * Severity (High | Medium | Low)
 * Product
 * Product component
 * Version
 * Milestone
 * Resolution (Unresolved | Fixed | Won't Fix | Duplicated | Incomplete | Cannot reproduce | ...)
 * Ticket reporter
 * Ticket owner
 * Ticket creation time
 * Ticket update time

Sebuah tiket dapat memiliki
 * lampiran (_attachments_)
 * komentar pengguna
 * riwayat perubahan

Aplikasi harus mengijinkan pengguna untuk :
 * membuat tiket baru
 * menubah atribut tiket
 * menambah komentar pada tiket
 * melihat riwayat perubahan
 * melampirkan file ke tiket
 * mencari tiket dan menyimpan query pencarian

=== Penguna ===
Ada tiga jenis pengguna dapat mengakses Trac dengan hak akses (_permission_) berbeda.

Pengguna tidak terdaftar (_Unregistered user_) boleh
 * melihat tiket, tetapi tidak dapat merubah dan memberi komentar tiket
 * mencari tiket
 * melihat komentar tiket

Penguna terdaftar (_registered user_) dapat melakukan semua aksi dari pengguna tidak terdaftar (_unregistered user_) dan
 * membuat tiket
 * menambah komentar pada tiket
 * mengedit tiket
 * menyimpan query tiket
 * menyisipkan file ke tiket

Administrator dapat melakukan semua aksi pengguna terdaftar (_registered user_) dan
 * mengelola enumerasi status tiket
 * mengelola enumerasi prioritas tiket 
 * mengelola enumerasi tingkat kesulitan (severity)
 * mengelola enumerasi resolusi tiket
 * mengelola produk dan komponen
 * mengelola versi
 * mengelola _milestone_
 * mengelola pengguna

== Desain halaman ==
Setelah memiliki kebutuhan bisnis, kini saatnya untuk menggambar halaman, juga disebut maket (_mockup_).

Cubi telah menyediakan halaman yang diunakan secara umum (registrasi pengguna, my account, ...), Mari fokus pada halaman khusus Trac.

=== Halaman tiket ===
Kita akan membutuhkan halaman berikut untuk mengelola tiket
 * Halaman daftar Tiket (dengan _paging_, _filter_)
 * Halaman pembuatan tiket
 * Halaman detil tiket (show attachments and change history)
 * Halaman pencarian tiket (berdasar nama, produk, prioritas, ...)
 * Halaman Tiket Ku (_My Tickets_)

=== Halaman administrasi ===
Halaman yang diperlukan untuk administrasi tiket termasuk
 * Halaman manajemen produk (nama dan deskripsi produk)
 * Halaman manajemen komponen produk (nama, deskripsi dan pemilik komponen)
 * Version management page (version number and description)
 * Milestone management page (milestone name, due time, complete time and description)
 * Halaman manajemen enumerasi (prioritas, jenis, severitas, status dan resolusi)

=== Menu dan Tab ===
Now that we have defined the application pages, we will need to add links of these pages to the navigation system - tabs and menus.

Tabs are the top level links appear under page header. Menus are the second level links of the specific Tab. With Trac added into Cubi, the navigation will be like:
 * Administration (Cubi Tab)
   * Menu Aplikasi
     * Pengguna (_User_)
     * Role
     * ...
 * Tiket (Tab Trac)
   * Jelajahi Tiket
     * Semua Tiket
     * Mencari Tiket
     * Membuat Tiket
     * Tiket Ku (_My Tickets_)
     * Tiket dilaporkan oleh saya (_Ticket reported by me_)
   * Admin Trac
     * Produk
     * Komponen
     * Versi
     * _Milestones_
     * Enumerasi

== Desain Database ==
Having feature requirements and page mockups, it is the time for designing the database. Let's have a prefix 'trac' for all tables of Trac application.

The most important table is trac_ticket of course.
{{{
CREATE TABLE `trac_ticket` (
  `id` int(11) NOT NULL auto_increment,
  `type` varchar(30) default NULL,
  `time` datetime default NULL,
  `changetime` datetime default NULL,
  `product_id` int(11) default NULL,
  `component_id` int(11) default NULL,
  `severity` varchar(30) default NULL,
  `priority` varchar(30) default NULL,
  `owner_id` int(11) default NULL,
  `reporter_id` int(11) default NULL,
  `cc` varchar(255) default NULL,
  `version_id` int(11) default NULL,
  `milestone_id` int(11) default NULL,
  `status` varchar(30) default NULL,
  `resolution` varchar(30) default NULL,
  `summary` varchar(255) default NULL,
  `description` text,
  `keywords` varchar(128) default NULL,
  PRIMARY KEY  (`id`),
  KEY `Index1` (`summary`),
  KEY `Index2` (`type`),
  KEY `Index3` (`product_id`),
  KEY `Index4` (`component_id`),
  KEY `Index5` (`priority`),
  KEY `Index6` (`owner_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
}}}

We also need tables to store ticket's comments and changes. We want to store comment and changes in a serialized string in 'comments' column.
{{{
CREATE TABLE `trac_comments` (
  `id` int(11) NOT NULL auto_increment,
  `parent_id` int(11) NOT NULL,
  `create_time` datetime default NULL,
  `author_id` int(11) default NULL,
  `comments` text,
  PRIMARY KEY  (`id`),
  KEY `Index1` (`parent_id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
}}}

Table to store "saved searches"
{{{
CREATE TABLE `trac_query` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) NOT NULL,
  `search_rules` text NOT NULL,
  `owner_id` int(11) DEFAULT NULL,
  `public` int(2) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8
}}}

Other supporting tables include:
 * trac_product
 * trac_component
 * trac_version
 * trac_milestone
 * trac_enumeration
{{{
CREATE TABLE `trac_product` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) NOT NULL DEFAULT '',
  `description` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
}}}
{{{
CREATE TABLE `trac_component` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) NOT NULL DEFAULT '',
  `product_id` int(11) NOT NULL,
  `owner_id` int(11) DEFAULT NULL,
  `description` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
}}}
{{{
CREATE TABLE `trac_version` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(30) NOT NULL DEFAULT '',
  `update_time` datetime DEFAULT NULL,
  `description` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
}}}
{{{
CREATE TABLE `trac_milestone` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `name` varchar(128) NOT NULL DEFAULT '',
  `due` datetime DEFAULT NULL,
  `completed` datetime DEFAULT NULL,
  `description` text,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM DEFAULT CHARSET=utf8;
}}}
{{{
CREATE TABLE `trac_enum` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `type` varchar(30) DEFAULT NULL,
  `name` varchar(50) DEFAULT NULL,
  `value` varchar(50) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8
}}}

Launch a database GUI or command line client, locate database that was created during Cubi installation wizard. Say the cubi database name is “cubi”. Run the document create table statement under “cubi” database.